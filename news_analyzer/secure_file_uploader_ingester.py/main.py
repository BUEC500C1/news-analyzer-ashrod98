# Main script that combines each function for this module

import ingester
import uploader
import logging

logging.basicConfig(format='%(name)s - %(levelname)s - %(message)s')
Request_headers: {
    "File" : {
        "File_Name": (file_name, type=str)
        "File_URI" : (file_uri, type=str)
        "File_Type" : (file_type, type=str) #.pdf, .doc, URL
        "Metadata" : (metadata, type=object) {
            "Author" : (author, type=str) # user provided, or from news_analyzer, 
            "Published_At" : (published_at, type=str)
            "Source" : (source, type=object){
                "Source" : (source, type=str) # user or news_analyzer
                "Search_param" : (search_param, type=list) # null if from user, search_param if from news_analyzer
                "Filters" : (filters, type=list) # null if from user, filters if from news_analyzer
            }
        "Analyses" : (analyses, type=list) {
            [analysis wanted]
        }

        }
    }
}

def uploader_ingester(Request_headers) # combined output form ingester and uploader, others field null until updated
    #file_URI can be path to file from local machine, or a URL
    Response_headers: { # includes all infomration about this file
        "File" : {
            "User_ID" : (user_id, type=str) # generated by uploader
            "File_Name": (file_name, type=str) # given
            "File_URI" : (file_uri, type=str) # given
            "File_Type" : (file_type, type=str) # given
            "File_ID" : (file_id, type=str) # generated by uploader
            "Text_info": (text, type=object) {
                "Text" : (raw.txt, type=array) # null, generated by ingester
                "Analyses" : (analyses, type=object) {
                    "Sentiment" : (sentiment, type=str) # null, generated by NPL
                    "Keywords" : (keywords, type=list) # ""
                    [other analyses results]
                }
            }
            "Metadata" : (metadata, type=object) {
                "Author" : (author, type=str) # user given or generated by NPL
                "Created_At" : (created_at, type=str) # generated by uplodaer: yyyy-MM-dd HH:mm:ss
                "Updated_At" : (updated_at, type=str) # generated by uploader: yyyy-MM-dd HH:mm:ss
                "Published_At" : (published_at, type=str) # null, gnerated by NYTAPI, or NLP if source is user. O/W same as creation date
                "Size" : (size, type=str) # generated by uploader
                "Source" : (source, type=object) {
                        "Source" : (source, type=str) # "user" or 'news_analyzer'
                        "Search_param" : (search_param, type=list) # null if from user, search_param if from news_analyzer
                        "Filters" : (filters, type=list) # null if from user, filters if from news_analyzer
                }
            }
            "Tags" : (tags, type=list) { # null, user generated
                    [tags]
            }
            "Notes" : (notes, type=str) # null, user generated
            "Permissions" : (permissions, type=object) {
                    "share_with" : [names] # user generated, default: user edit only
            }
            "Status" : (status, type=object) {
                "Uploader_status" : (uploader_status, type=str) # default: in_progress, uploader will update
                "Ingester_status": (ingester_status, type=str) # default: stand_by, ingester will update
                "NLP_status" : (nlp_status, type=str) # default: stand_by, text_nlp_analysis will update
            }
        }
    }

    return Response_headers

# possible logging
logging.error('Invalid input. File not found')
